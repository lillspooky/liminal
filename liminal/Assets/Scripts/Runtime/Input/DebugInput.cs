//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/Scripts/Runtime/Input/DebugInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace liminal
{
    public partial class @DebugInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @DebugInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""DebugInput"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""2277380a-81f5-4f59-9444-483eb5c80511"",
            ""actions"": [
                {
                    ""name"": ""Switch Characters"",
                    ""type"": ""Button"",
                    ""id"": ""c7dee421-5605-4b2b-bc21-c487ce15c14b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f1624af0-af6d-40a4-bf63-8c25d68cfd9c"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Characters"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93c90604-f58e-4dbe-9aff-9d79bf611649"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Characters"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Default
            m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
            m_Default_SwitchCharacters = m_Default.FindAction("Switch Characters", throwIfNotFound: true);
        }

        ~@DebugInput()
        {
            UnityEngine.Debug.Assert(!m_Default.enabled, "This will cause a leak and performance issues, DebugInput.Default.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Default
        private readonly InputActionMap m_Default;
        private List<IDefaultActions> m_DefaultActionsCallbackInterfaces = new List<IDefaultActions>();
        private readonly InputAction m_Default_SwitchCharacters;
        public struct DefaultActions
        {
            private @DebugInput m_Wrapper;
            public DefaultActions(@DebugInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @SwitchCharacters => m_Wrapper.m_Default_SwitchCharacters;
            public InputActionMap Get() { return m_Wrapper.m_Default; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
            public void AddCallbacks(IDefaultActions instance)
            {
                if (instance == null || m_Wrapper.m_DefaultActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_DefaultActionsCallbackInterfaces.Add(instance);
                @SwitchCharacters.started += instance.OnSwitchCharacters;
                @SwitchCharacters.performed += instance.OnSwitchCharacters;
                @SwitchCharacters.canceled += instance.OnSwitchCharacters;
            }

            private void UnregisterCallbacks(IDefaultActions instance)
            {
                @SwitchCharacters.started -= instance.OnSwitchCharacters;
                @SwitchCharacters.performed -= instance.OnSwitchCharacters;
                @SwitchCharacters.canceled -= instance.OnSwitchCharacters;
            }

            public void RemoveCallbacks(IDefaultActions instance)
            {
                if (m_Wrapper.m_DefaultActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IDefaultActions instance)
            {
                foreach (var item in m_Wrapper.m_DefaultActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_DefaultActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public DefaultActions @Default => new DefaultActions(this);
        public interface IDefaultActions
        {
            void OnSwitchCharacters(InputAction.CallbackContext context);
        }
    }
}
